/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UploadFile from '../model/UploadFile';
import UploadIdPostRequestFileInfo from '../model/UploadIdPostRequestFileInfo';

/**
* UploadFile service.
* @module api/UploadFileApi
* @version 1.0.0
*/
export default class UploadFileApi {

    /**
    * Constructs a new UploadFileApi. 
    * @alias module:api/UploadFileApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the uploadFilesGet operation.
     * @callback module:api/UploadFileApi~uploadFilesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UploadFile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/UploadFileApi~uploadFilesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UploadFile>}
     */
    uploadFilesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UploadFile];
      return this.apiClient.callApi(
        '/upload/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFilesIdDelete operation.
     * @callback module:api/UploadFileApi~uploadFilesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/UploadFileApi~uploadFilesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadFile}
     */
    uploadFilesIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling uploadFilesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UploadFile;
      return this.apiClient.callApi(
        '/upload/files/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFilesIdGet operation.
     * @callback module:api/UploadFileApi~uploadFilesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/UploadFileApi~uploadFilesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadFile}
     */
    uploadFilesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling uploadFilesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UploadFile;
      return this.apiClient.callApi(
        '/upload/files/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadIdPost operation.
     * @callback module:api/UploadFileApi~uploadIdPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UploadFile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * Upload file information
     * @param {String} id File id
     * @param {Object} opts Optional parameters
     * @param {module:model/UploadIdPostRequestFileInfo} [fileInfo] 
     * @param {File} [files] 
     * @param {module:api/UploadFileApi~uploadIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UploadFile>}
     */
    uploadIdPost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling uploadIdPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
        'fileInfo': opts['fileInfo'],
        'files': opts['files']
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [UploadFile];
      return this.apiClient.callApi(
        '/upload/id', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadPost operation.
     * @callback module:api/UploadFileApi~uploadPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UploadFile>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * Upload files
     * @param {Array.<File>} files 
     * @param {Object} opts Optional parameters
     * @param {String} [path] The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3).
     * @param {String} [refId] The ID of the entry which the file(s) will be linked to
     * @param {String} [ref] The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant).
     * @param {String} [field] The field of the entry which the file(s) will be precisely linked to.
     * @param {module:api/UploadFileApi~uploadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UploadFile>}
     */
    uploadPost(files, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'files' is set
      if (files === undefined || files === null) {
        throw new Error("Missing the required parameter 'files' when calling uploadPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'path': opts['path'],
        'refId': opts['refId'],
        'ref': opts['ref'],
        'field': opts['field'],
        'files': this.apiClient.buildCollectionParam(files, 'passthrough')
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [UploadFile];
      return this.apiClient.callApi(
        '/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
