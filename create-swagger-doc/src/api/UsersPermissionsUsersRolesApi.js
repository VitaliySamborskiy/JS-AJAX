/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthForgotPasswordPost200Response from '../model/AuthForgotPasswordPost200Response';
import Error from '../model/Error';
import UsersPermissionsPermissionsGet200Response from '../model/UsersPermissionsPermissionsGet200Response';
import UsersPermissionsRolesGet200Response from '../model/UsersPermissionsRolesGet200Response';
import UsersPermissionsRolesIdGet200Response from '../model/UsersPermissionsRolesIdGet200Response';
import UsersPermissionsRolesPostRequest from '../model/UsersPermissionsRolesPostRequest';
import UsersPermissionsUser from '../model/UsersPermissionsUser';
import UsersPost201Response from '../model/UsersPost201Response';
import UsersPostRequest from '../model/UsersPostRequest';

/**
* UsersPermissionsUsersRoles service.
* @module api/UsersPermissionsUsersRolesApi
* @version 1.0.0
*/
export default class UsersPermissionsUsersRolesApi {

    /**
    * Constructs a new UsersPermissionsUsersRolesApi. 
    * @alias module:api/UsersPermissionsUsersRolesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersCountGet operation.
     * @callback module:api/UsersPermissionsUsersRolesApi~usersCountGetCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user count
     * @param {module:api/UsersPermissionsUsersRolesApi~usersCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    usersCountGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/users/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGet operation.
     * @callback module:api/UsersPermissionsUsersRolesApi~usersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UsersPermissionsUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of users
     * @param {module:api/UsersPermissionsUsersRolesApi~usersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UsersPermissionsUser>}
     */
    usersGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UsersPermissionsUser];
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdDelete operation.
     * @callback module:api/UsersPermissionsUsersRolesApi~usersIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersPermissionsUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user
     * @param {String} id user Id
     * @param {module:api/UsersPermissionsUsersRolesApi~usersIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersPermissionsUser}
     */
    usersIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersPermissionsUser;
      return this.apiClient.callApi(
        '/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdGet operation.
     * @callback module:api/UsersPermissionsUsersRolesApi~usersIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersPermissionsUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user
     * @param {String} id user Id
     * @param {module:api/UsersPermissionsUsersRolesApi~usersIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersPermissionsUser}
     */
    usersIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersPermissionsUser;
      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdPut operation.
     * @callback module:api/UsersPermissionsUsersRolesApi~usersIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersPost201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user
     * @param {String} id user Id
     * @param {module:model/UsersPostRequest} usersPostRequest 
     * @param {module:api/UsersPermissionsUsersRolesApi~usersIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersPost201Response}
     */
    usersIdPut(id, usersPostRequest, callback) {
      let postBody = usersPostRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdPut");
      }
      // verify the required parameter 'usersPostRequest' is set
      if (usersPostRequest === undefined || usersPostRequest === null) {
        throw new Error("Missing the required parameter 'usersPostRequest' when calling usersIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UsersPost201Response;
      return this.apiClient.callApi(
        '/users/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersMeGet operation.
     * @callback module:api/UsersPermissionsUsersRolesApi~usersMeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersPermissionsUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get authenticated user info
     * @param {module:api/UsersPermissionsUsersRolesApi~usersMeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersPermissionsUser}
     */
    usersMeGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersPermissionsUser;
      return this.apiClient.callApi(
        '/users/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPermissionsPermissionsGet operation.
     * @callback module:api/UsersPermissionsUsersRolesApi~usersPermissionsPermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersPermissionsPermissionsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get default generated permissions
     * @param {module:api/UsersPermissionsUsersRolesApi~usersPermissionsPermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersPermissionsPermissionsGet200Response}
     */
    usersPermissionsPermissionsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersPermissionsPermissionsGet200Response;
      return this.apiClient.callApi(
        '/users-permissions/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPermissionsRolesGet operation.
     * @callback module:api/UsersPermissionsUsersRolesApi~usersPermissionsRolesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersPermissionsRolesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List roles
     * @param {module:api/UsersPermissionsUsersRolesApi~usersPermissionsRolesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersPermissionsRolesGet200Response}
     */
    usersPermissionsRolesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersPermissionsRolesGet200Response;
      return this.apiClient.callApi(
        '/users-permissions/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPermissionsRolesIdGet operation.
     * @callback module:api/UsersPermissionsUsersRolesApi~usersPermissionsRolesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersPermissionsRolesIdGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a role
     * @param {String} id role Id
     * @param {module:api/UsersPermissionsUsersRolesApi~usersPermissionsRolesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersPermissionsRolesIdGet200Response}
     */
    usersPermissionsRolesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersPermissionsRolesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersPermissionsRolesIdGet200Response;
      return this.apiClient.callApi(
        '/users-permissions/roles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPermissionsRolesPost operation.
     * @callback module:api/UsersPermissionsUsersRolesApi~usersPermissionsRolesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthForgotPasswordPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a role
     * @param {module:model/UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest 
     * @param {module:api/UsersPermissionsUsersRolesApi~usersPermissionsRolesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthForgotPasswordPost200Response}
     */
    usersPermissionsRolesPost(usersPermissionsRolesPostRequest, callback) {
      let postBody = usersPermissionsRolesPostRequest;
      // verify the required parameter 'usersPermissionsRolesPostRequest' is set
      if (usersPermissionsRolesPostRequest === undefined || usersPermissionsRolesPostRequest === null) {
        throw new Error("Missing the required parameter 'usersPermissionsRolesPostRequest' when calling usersPermissionsRolesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthForgotPasswordPost200Response;
      return this.apiClient.callApi(
        '/users-permissions/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPermissionsRolesRoleDelete operation.
     * @callback module:api/UsersPermissionsUsersRolesApi~usersPermissionsRolesRoleDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthForgotPasswordPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a role
     * @param {String} role role Id
     * @param {module:api/UsersPermissionsUsersRolesApi~usersPermissionsRolesRoleDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthForgotPasswordPost200Response}
     */
    usersPermissionsRolesRoleDelete(role, callback) {
      let postBody = null;
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling usersPermissionsRolesRoleDelete");
      }

      let pathParams = {
        'role': role
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthForgotPasswordPost200Response;
      return this.apiClient.callApi(
        '/users-permissions/roles/{role}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPermissionsRolesRolePut operation.
     * @callback module:api/UsersPermissionsUsersRolesApi~usersPermissionsRolesRolePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthForgotPasswordPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a role
     * @param {String} role role Id
     * @param {module:model/UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest 
     * @param {module:api/UsersPermissionsUsersRolesApi~usersPermissionsRolesRolePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthForgotPasswordPost200Response}
     */
    usersPermissionsRolesRolePut(role, usersPermissionsRolesPostRequest, callback) {
      let postBody = usersPermissionsRolesPostRequest;
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling usersPermissionsRolesRolePut");
      }
      // verify the required parameter 'usersPermissionsRolesPostRequest' is set
      if (usersPermissionsRolesPostRequest === undefined || usersPermissionsRolesPostRequest === null) {
        throw new Error("Missing the required parameter 'usersPermissionsRolesPostRequest' when calling usersPermissionsRolesRolePut");
      }

      let pathParams = {
        'role': role
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthForgotPasswordPost200Response;
      return this.apiClient.callApi(
        '/users-permissions/roles/{role}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersPost operation.
     * @callback module:api/UsersPermissionsUsersRolesApi~usersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersPost201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a user
     * @param {module:model/UsersPostRequest} usersPostRequest 
     * @param {module:api/UsersPermissionsUsersRolesApi~usersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersPost201Response}
     */
    usersPost(usersPostRequest, callback) {
      let postBody = usersPostRequest;
      // verify the required parameter 'usersPostRequest' is set
      if (usersPostRequest === undefined || usersPostRequest === null) {
        throw new Error("Missing the required parameter 'usersPostRequest' when calling usersPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UsersPost201Response;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
