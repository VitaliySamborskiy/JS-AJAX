/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthChangePasswordPostRequest from '../model/AuthChangePasswordPostRequest';
import AuthForgotPasswordPost200Response from '../model/AuthForgotPasswordPost200Response';
import AuthForgotPasswordPostRequest from '../model/AuthForgotPasswordPostRequest';
import AuthLocalPostRequest from '../model/AuthLocalPostRequest';
import AuthLocalRegisterPostRequest from '../model/AuthLocalRegisterPostRequest';
import AuthResetPasswordPostRequest from '../model/AuthResetPasswordPostRequest';
import AuthSendEmailConfirmationPost200Response from '../model/AuthSendEmailConfirmationPost200Response';
import Error from '../model/Error';
import UsersPermissionsUserRegistration from '../model/UsersPermissionsUserRegistration';

/**
* UsersPermissionsAuth service.
* @module api/UsersPermissionsAuthApi
* @version 1.0.0
*/
export default class UsersPermissionsAuthApi {

    /**
    * Constructs a new UsersPermissionsAuthApi. 
    * @alias module:api/UsersPermissionsAuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authChangePasswordPost operation.
     * @callback module:api/UsersPermissionsAuthApi~authChangePasswordPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersPermissionsUserRegistration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user's own password
     * @param {module:model/AuthChangePasswordPostRequest} authChangePasswordPostRequest 
     * @param {module:api/UsersPermissionsAuthApi~authChangePasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersPermissionsUserRegistration}
     */
    authChangePasswordPost(authChangePasswordPostRequest, callback) {
      let postBody = authChangePasswordPostRequest;
      // verify the required parameter 'authChangePasswordPostRequest' is set
      if (authChangePasswordPostRequest === undefined || authChangePasswordPostRequest === null) {
        throw new Error("Missing the required parameter 'authChangePasswordPostRequest' when calling authChangePasswordPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UsersPermissionsUserRegistration;
      return this.apiClient.callApi(
        '/auth/change-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authEmailConfirmationGet operation.
     * @callback module:api/UsersPermissionsAuthApi~authEmailConfirmationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Error} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm user email
     * @param {Object} opts Optional parameters
     * @param {String} [confirmation] confirmation token received by email
     * @param {module:api/UsersPermissionsAuthApi~authEmailConfirmationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Error}
     */
    authEmailConfirmationGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'confirmation': opts['confirmation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Error;
      return this.apiClient.callApi(
        '/auth/email-confirmation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authForgotPasswordPost operation.
     * @callback module:api/UsersPermissionsAuthApi~authForgotPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthForgotPasswordPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send rest password email
     * @param {module:model/AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
     * @param {module:api/UsersPermissionsAuthApi~authForgotPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthForgotPasswordPost200Response}
     */
    authForgotPasswordPost(authForgotPasswordPostRequest, callback) {
      let postBody = authForgotPasswordPostRequest;
      // verify the required parameter 'authForgotPasswordPostRequest' is set
      if (authForgotPasswordPostRequest === undefined || authForgotPasswordPostRequest === null) {
        throw new Error("Missing the required parameter 'authForgotPasswordPostRequest' when calling authForgotPasswordPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthForgotPasswordPost200Response;
      return this.apiClient.callApi(
        '/auth/forgot-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authLocalPost operation.
     * @callback module:api/UsersPermissionsAuthApi~authLocalPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersPermissionsUserRegistration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Local login
     * Returns a jwt token and user info
     * @param {module:model/AuthLocalPostRequest} authLocalPostRequest 
     * @param {module:api/UsersPermissionsAuthApi~authLocalPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersPermissionsUserRegistration}
     */
    authLocalPost(authLocalPostRequest, callback) {
      let postBody = authLocalPostRequest;
      // verify the required parameter 'authLocalPostRequest' is set
      if (authLocalPostRequest === undefined || authLocalPostRequest === null) {
        throw new Error("Missing the required parameter 'authLocalPostRequest' when calling authLocalPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UsersPermissionsUserRegistration;
      return this.apiClient.callApi(
        '/auth/local', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authLocalRegisterPost operation.
     * @callback module:api/UsersPermissionsAuthApi~authLocalRegisterPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersPermissionsUserRegistration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a user
     * Returns a jwt token and user info
     * @param {module:model/AuthLocalRegisterPostRequest} authLocalRegisterPostRequest 
     * @param {module:api/UsersPermissionsAuthApi~authLocalRegisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersPermissionsUserRegistration}
     */
    authLocalRegisterPost(authLocalRegisterPostRequest, callback) {
      let postBody = authLocalRegisterPostRequest;
      // verify the required parameter 'authLocalRegisterPostRequest' is set
      if (authLocalRegisterPostRequest === undefined || authLocalRegisterPostRequest === null) {
        throw new Error("Missing the required parameter 'authLocalRegisterPostRequest' when calling authLocalRegisterPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UsersPermissionsUserRegistration;
      return this.apiClient.callApi(
        '/auth/local/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authProviderCallbackGet operation.
     * @callback module:api/UsersPermissionsAuthApi~authProviderCallbackGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersPermissionsUserRegistration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Default Callback from provider auth
     * @param {String} provider Provider name
     * @param {module:api/UsersPermissionsAuthApi~authProviderCallbackGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersPermissionsUserRegistration}
     */
    authProviderCallbackGet(provider, callback) {
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling authProviderCallbackGet");
      }

      let pathParams = {
        'provider': provider
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersPermissionsUserRegistration;
      return this.apiClient.callApi(
        '/auth/{provider}/callback', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authResetPasswordPost operation.
     * @callback module:api/UsersPermissionsAuthApi~authResetPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersPermissionsUserRegistration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rest user password
     * @param {module:model/AuthResetPasswordPostRequest} authResetPasswordPostRequest 
     * @param {module:api/UsersPermissionsAuthApi~authResetPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersPermissionsUserRegistration}
     */
    authResetPasswordPost(authResetPasswordPostRequest, callback) {
      let postBody = authResetPasswordPostRequest;
      // verify the required parameter 'authResetPasswordPostRequest' is set
      if (authResetPasswordPostRequest === undefined || authResetPasswordPostRequest === null) {
        throw new Error("Missing the required parameter 'authResetPasswordPostRequest' when calling authResetPasswordPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UsersPermissionsUserRegistration;
      return this.apiClient.callApi(
        '/auth/reset-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authSendEmailConfirmationPost operation.
     * @callback module:api/UsersPermissionsAuthApi~authSendEmailConfirmationPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthSendEmailConfirmationPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send confirmation email
     * @param {module:model/AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
     * @param {module:api/UsersPermissionsAuthApi~authSendEmailConfirmationPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthSendEmailConfirmationPost200Response}
     */
    authSendEmailConfirmationPost(authForgotPasswordPostRequest, callback) {
      let postBody = authForgotPasswordPostRequest;
      // verify the required parameter 'authForgotPasswordPostRequest' is set
      if (authForgotPasswordPostRequest === undefined || authForgotPasswordPostRequest === null) {
        throw new Error("Missing the required parameter 'authForgotPasswordPostRequest' when calling authSendEmailConfirmationPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthSendEmailConfirmationPost200Response;
      return this.apiClient.callApi(
        '/auth/send-email-confirmation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectProviderGet operation.
     * @callback module:api/UsersPermissionsAuthApi~connectProviderGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Error} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login with a provider
     * Redirects to provider login before being redirect to /auth/{provider}/callback
     * @param {String} provider Provider name
     * @param {module:api/UsersPermissionsAuthApi~connectProviderGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Error}
     */
    connectProviderGet(provider, callback) {
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling connectProviderGet");
      }

      let pathParams = {
        'provider': provider
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Error;
      return this.apiClient.callApi(
        '/connect/{provider}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
