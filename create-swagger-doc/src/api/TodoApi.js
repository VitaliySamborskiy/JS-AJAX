/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import TodoListResponse from '../model/TodoListResponse';
import TodoRequest from '../model/TodoRequest';
import TodoResponse from '../model/TodoResponse';

/**
* Todo service.
* @module api/TodoApi
* @version 1.0.0
*/
export default class TodoApi {

    /**
    * Constructs a new TodoApi. 
    * @alias module:api/TodoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteTodosId operation.
     * @callback module:api/TodoApi~deleteTodosIdCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/TodoApi~deleteTodosIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    deleteTodosId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTodosId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/todos/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTodos operation.
     * @callback module:api/TodoApi~getTodosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TodoListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {Boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {Number} [paginationPage] Page number (default: 0)
     * @param {Number} [paginationPageSize] Page size (default: 25)
     * @param {Number} [paginationStart] Offset value (default: 0)
     * @param {Number} [paginationLimit] Number of entities to return (default: 25)
     * @param {String} [fields] Fields to return (ex: title,author)
     * @param {String} [populate] Relations to return
     * @param {Object.<String, {String: Object}>} [filters] Filters to apply
     * @param {String} [locale] Locale to apply
     * @param {module:api/TodoApi~getTodosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TodoListResponse}
     */
    getTodos(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sort': opts['sort'],
        'pagination[withCount]': opts['paginationWithCount'],
        'pagination[page]': opts['paginationPage'],
        'pagination[pageSize]': opts['paginationPageSize'],
        'pagination[start]': opts['paginationStart'],
        'pagination[limit]': opts['paginationLimit'],
        'fields': opts['fields'],
        'populate': opts['populate'],
        'filters': opts['filters'],
        'locale': opts['locale']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TodoListResponse;
      return this.apiClient.callApi(
        '/todos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTodosId operation.
     * @callback module:api/TodoApi~getTodosIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TodoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/TodoApi~getTodosIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TodoResponse}
     */
    getTodosId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTodosId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TodoResponse;
      return this.apiClient.callApi(
        '/todos/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTodos operation.
     * @callback module:api/TodoApi~postTodosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TodoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/TodoRequest} todoRequest 
     * @param {module:api/TodoApi~postTodosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TodoResponse}
     */
    postTodos(todoRequest, callback) {
      let postBody = todoRequest;
      // verify the required parameter 'todoRequest' is set
      if (todoRequest === undefined || todoRequest === null) {
        throw new Error("Missing the required parameter 'todoRequest' when calling postTodos");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TodoResponse;
      return this.apiClient.callApi(
        '/todos', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTodosId operation.
     * @callback module:api/TodoApi~putTodosIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TodoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/TodoRequest} todoRequest 
     * @param {module:api/TodoApi~putTodosIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TodoResponse}
     */
    putTodosId(id, todoRequest, callback) {
      let postBody = todoRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putTodosId");
      }
      // verify the required parameter 'todoRequest' is set
      if (todoRequest === undefined || todoRequest === null) {
        throw new Error("Missing the required parameter 'todoRequest' when calling putTodosId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TodoResponse;
      return this.apiClient.callApi(
        '/todos/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
