/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UploadFile model module.
 * @module model/UploadFile
 * @version 1.0.0
 */
class UploadFile {
    /**
     * Constructs a new <code>UploadFile</code>.
     * @alias module:model/UploadFile
     */
    constructor() { 
        
        UploadFile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UploadFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadFile} obj Optional instance to populate.
     * @return {module:model/UploadFile} The populated <code>UploadFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadFile();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('alternativeText')) {
                obj['alternativeText'] = ApiClient.convertToType(data['alternativeText'], 'String');
            }
            if (data.hasOwnProperty('caption')) {
                obj['caption'] = ApiClient.convertToType(data['caption'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('formats')) {
                obj['formats'] = ApiClient.convertToType(data['formats'], 'Number');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
            if (data.hasOwnProperty('ext')) {
                obj['ext'] = ApiClient.convertToType(data['ext'], 'String');
            }
            if (data.hasOwnProperty('mime')) {
                obj['mime'] = ApiClient.convertToType(data['mime'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('previewUrl')) {
                obj['previewUrl'] = ApiClient.convertToType(data['previewUrl'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('provider_metadata')) {
                obj['provider_metadata'] = ApiClient.convertToType(data['provider_metadata'], Object);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadFile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadFile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['alternativeText'] && !(typeof data['alternativeText'] === 'string' || data['alternativeText'] instanceof String)) {
            throw new Error("Expected the field `alternativeText` to be a primitive type in the JSON string but got " + data['alternativeText']);
        }
        // ensure the json data is a string
        if (data['caption'] && !(typeof data['caption'] === 'string' || data['caption'] instanceof String)) {
            throw new Error("Expected the field `caption` to be a primitive type in the JSON string but got " + data['caption']);
        }
        // ensure the json data is a string
        if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
            throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
        }
        // ensure the json data is a string
        if (data['ext'] && !(typeof data['ext'] === 'string' || data['ext'] instanceof String)) {
            throw new Error("Expected the field `ext` to be a primitive type in the JSON string but got " + data['ext']);
        }
        // ensure the json data is a string
        if (data['mime'] && !(typeof data['mime'] === 'string' || data['mime'] instanceof String)) {
            throw new Error("Expected the field `mime` to be a primitive type in the JSON string but got " + data['mime']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['previewUrl'] && !(typeof data['previewUrl'] === 'string' || data['previewUrl'] instanceof String)) {
            throw new Error("Expected the field `previewUrl` to be a primitive type in the JSON string but got " + data['previewUrl']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
UploadFile.prototype['id'] = undefined;

/**
 * @member {String} name
 */
UploadFile.prototype['name'] = undefined;

/**
 * @member {String} alternativeText
 */
UploadFile.prototype['alternativeText'] = undefined;

/**
 * @member {String} caption
 */
UploadFile.prototype['caption'] = undefined;

/**
 * @member {Number} width
 */
UploadFile.prototype['width'] = undefined;

/**
 * @member {Number} height
 */
UploadFile.prototype['height'] = undefined;

/**
 * @member {Number} formats
 */
UploadFile.prototype['formats'] = undefined;

/**
 * @member {String} hash
 */
UploadFile.prototype['hash'] = undefined;

/**
 * @member {String} ext
 */
UploadFile.prototype['ext'] = undefined;

/**
 * @member {String} mime
 */
UploadFile.prototype['mime'] = undefined;

/**
 * @member {Number} size
 */
UploadFile.prototype['size'] = undefined;

/**
 * @member {String} url
 */
UploadFile.prototype['url'] = undefined;

/**
 * @member {String} previewUrl
 */
UploadFile.prototype['previewUrl'] = undefined;

/**
 * @member {String} provider
 */
UploadFile.prototype['provider'] = undefined;

/**
 * @member {Object} provider_metadata
 */
UploadFile.prototype['provider_metadata'] = undefined;

/**
 * @member {Date} createdAt
 */
UploadFile.prototype['createdAt'] = undefined;

/**
 * @member {Date} updatedAt
 */
UploadFile.prototype['updatedAt'] = undefined;






export default UploadFile;

